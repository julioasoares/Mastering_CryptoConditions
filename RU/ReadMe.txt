Как создавать базирующиеся на UTXO (выходах) контракты CryptoConditions для блокчейнов в кластере KMD
автор jl777

Это не единственная методология смарт-контрактов, которую возможно построить на OP_CHECKCRYPTOCONDITION, просто она является первой. Вся заслуга за то, что OP_CHECKCRYPTOCONDITION работает с кодовой базой Komodo принадлежит @libscott. Я просто цепляюсь к коду и пытаюсь сделать его немного проще для создания новых контрактов.

Пожалуй можно придумать какое нибудь причудливое имя в целях маркетинга, но сейчас я просто коротко назову это "CC контракты", зная что это не на 100% технически точно, так как аспект CryptoConditions не является главной характерной чертой. Однако, контракты KMD были построены на кодовой базе CryptoConditions, которая была интегрирована в них, чтобы стать более доступной.
Поскольку CC контракты запускают нативный C/C++ код, они являются Тьюринг-полными, а это значит, что, любой контракт который возможно создать на любой другой платформе можно реализовать через CC контракт.

Начать писать контракты на основе UTXO немного сложнее чем контракты основанные на балансах. Однако, они гораздо более безопасны, поскольку используют существующую систему UTXO Bitcoin. Это делает гораздо менее вероятным появление багов, из-за которых можно выпустить квадриллион новых монет, поскольку все операции с CC контрактом также должны подчиняться существующему UTXO протоколу Bitcoin.

Данный документ будет в значительной степени основан на примерах, то есть будет использовать много отсылок к существующим CC. После осознания данного документа, вы должны быть достаточно подготовлены чтобы начать создавать новые CC контракты для интеграции в komodod, либо непосредственно dAPPS на основе RPC.

Глава 0 - основы протокола Bitcoin
Глава 1 - OP_CHECKCRYPTOCONDITION
Глава 2 - основы CC контрактов
Глава 3 - CC vouts
Глава 4 - rpc раcширения CC
Глава 5 - валидация CC
Глава 6 - пример: faucet
Глава 7 - пример: rewards
Глава 8 - пример: assets
Глава 9 - пример: dice
Глава 10 - пример: lotto
Глава 11 - пример: channels
Глава 12 - неограниченные возможности
Глава 13 - различные языки
Глава 14 - привязка среды исполнения
Глава 15 - dapps основанные на rpc
